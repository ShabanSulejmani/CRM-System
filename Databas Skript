create sequence "FordonForms_Id_seq";

alter sequence "FordonForms_Id_seq" owner to postgres;

create sequence "ForsakringsForms_Id_seq";

alter sequence "ForsakringsForms_Id_seq" owner to postgres;

create sequence "TeleForms_Id_seq";

alter sequence "TeleForms_Id_seq" owner to postgres;

create sequence "Users_Id_seq";

alter sequence "Users_Id_seq" owner to postgres;

create sequence "ChatMessages_Id_seq"
    as integer;

alter sequence "ChatMessages_Id_seq" owner to postgres;

create sequence "Role_id_seq";

alter sequence "Role_id_seq" owner to postgres;

create sequence "forsakrings_forms_Id_seq"
    as integer;

alter sequence "forsakrings_forms_Id_seq" owner to postgres;

create table fordon_forms
(
    "Id"           integer generated by default as identity
        constraint "PK_FordonForms"
            primary key,
    first_name     text                     not null,
    email          text                     not null,
    reg_nummer     text                     not null,
    issue_type     text                     not null,
    message        text                     not null,
    chat_token     text                     not null
        constraint "UQ_FordonForms_ChatToken"
            unique,
    submitted_at   timestamp with time zone not null,
    is_chat_active boolean                  not null,
    company_type   text default ''::text    not null
);

alter table fordon_forms
    owner to postgres;

create unique index "IX_FordonForms_ChatToken"
    on fordon_forms (chat_token);

create table forsakrings_forms
(
    "Id"           integer generated by default as identity
        constraint "PK_ForsakringsForms"
            primary key,
    first_name     text                     not null,
    email          text                     not null,
    insurance_type text                     not null,
    issue_type     text                     not null,
    message        text                     not null,
    chat_token     text                     not null
        constraint "UQ_ForsakringsForms_ChatToken"
            unique,
    submitted_at   timestamp with time zone not null,
    is_chat_active boolean                  not null,
    company_type   text default ''::text    not null
);

alter table forsakrings_forms
    owner to postgres;

alter sequence "ForsakringsForms_Id_seq" owned by forsakrings_forms."Id";

create unique index "IX_ForsakringsForms_ChatToken"
    on forsakrings_forms (chat_token);

create table tele_forms
(
    "Id"           integer generated by default as identity
        constraint "PK_TeleForms"
            primary key,
    first_name     text                     not null,
    email          text                     not null,
    service_type   text                     not null,
    issue_type     text                     not null,
    message        text                     not null,
    chat_token     text                     not null
        constraint "UQ_TeleForms_ChatToken"
            unique,
    submitted_at   timestamp with time zone not null,
    is_chat_active boolean                  not null,
    company_type   text default ''::text    not null
);

alter table tele_forms
    owner to postgres;

create unique index "IX_TeleForms_ChatToken"
    on tele_forms (chat_token);

create table chat_messages
(
    id           integer default nextval('"ChatMessages_Id_seq"'::regclass) not null
        constraint "ChatMessages_pkey"
            primary key,
    sender       varchar(100)                                               not null,
    message      text                                                       not null,
    submitted_at timestamp with time zone                                   not null,
    chat_token   text
);

alter table chat_messages
    owner to postgres;

alter sequence "ChatMessages_Id_seq" owned by chat_messages.id;

create table dynamicforms
(
    id           serial
        primary key,
    formtype     varchar(50)          not null,
    firstname    varchar(100)         not null,
    companytype  varchar(100)         not null,
    email        varchar(255)         not null,
    fields       jsonb                not null,
    message      text,
    chattoken    varchar(100)         not null
        unique,
    submittedat  timestamp            not null,
    ischatactive boolean default true not null
);

alter table dynamicforms
    owner to postgres;

create table role
(
    id           bigint generated by default as identity
        constraint "Role_pkey"
            primary key,
    company_role varchar not null
);

alter table role
    owner to postgres;

create table users
(
    "Id"       integer generated by default as identity
        constraint "PK_Users"
            primary key,
    first_name varchar(50)                                            not null,
    password   varchar(100)                                           not null,
    created_at timestamp with time zone default CURRENT_TIMESTAMP     not null,
    company    varchar(50)              default ''::character varying not null,
    role_id    smallint
        constraint "Users_Role_id_fk"
            references role,
    email      varchar(255)                                           not null
        unique
);

alter table users
    owner to postgres;

create table archived_tickets
(
    id               serial
        primary key,
    original_id      integer,
    original_table   text,
    form_type        text not null,
    first_name       text,
    email            text,
    issue_type       text,
    message          text,
    chat_token       text not null,
    submitted_at     timestamp with time zone,
    resolved_at      timestamp with time zone,
    company_type     text,
    resolution_notes text,
    service_type     text,
    reg_nummer       text,
    insurance_type   text
);

alter table archived_tickets
    owner to postgres;

create index idx_archived_chat_token
    on archived_tickets (chat_token);

create index idx_archived_form_type
    on archived_tickets (form_type);

create index idx_archived_resolved_at
    on archived_tickets (resolved_at);

create table chat_ratings
(
    id           serial
        primary key,
    chat_token   text not null,
    rating       integer
        constraint chat_ratings_rating_check
            check ((rating >= 1) AND (rating <= 5)),
    feedback     text,
    submitted_at timestamp default now()
);

alter table chat_ratings
    owner to postgres;

create view initial_form_messages (chat_token, sender, message, submitted_at, issue_type, email, form_type) as
SELECT ff.chat_token,
       ff.first_name          AS sender,
       ff.message,
       ff.submitted_at,
       ff.issue_type,
       ff.email,
       'Fordonsservice'::text AS form_type
FROM fordon_forms ff
WHERE ff.is_chat_active = true
UNION ALL
SELECT tf.chat_token,
       tf.first_name         AS sender,
       tf.message,
       tf.submitted_at,
       tf.issue_type,
       tf.email,
       'Tele/Bredband'::text AS form_type
FROM tele_forms tf
WHERE tf.is_chat_active = true
UNION ALL
SELECT f.chat_token,
       f.first_name               AS sender,
       f.message,
       f.submitted_at,
       f.issue_type,
       f.email,
       'Försäkringsärenden'::text AS form_type
FROM forsakrings_forms f
WHERE f.is_chat_active = true;

alter table initial_form_messages
    owner to postgres;

create view admin_tickets(chat_token, rating, feedback, first_name) as
SELECT cr.chat_token,
       cr.rating,
       cr.feedback,
       u.first_name
FROM chat_ratings cr
         JOIN users u ON u.email::text = ((SELECT all_forms.email
                                           FROM (SELECT fordon_forms.email,
                                                        fordon_forms.chat_token
                                                 FROM fordon_forms
                                                 UNION ALL
                                                 SELECT forsakrings_forms.email,
                                                        forsakrings_forms.chat_token
                                                 FROM forsakrings_forms
                                                 UNION ALL
                                                 SELECT tele_forms.email,
                                                        tele_forms.chat_token
                                                 FROM tele_forms
                                                 UNION ALL
                                                 SELECT dynamicforms.email,
                                                        cr.chat_token
                                                 FROM dynamicforms) all_forms
                                           WHERE all_forms.chat_token = cr.chat_token
                                           LIMIT 1));

alter table admin_tickets
    owner to postgres;


